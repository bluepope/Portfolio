@{
    ViewData["Title"] = "Ajax Test";
}
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

<div id="ajax-test">
    <table class="table table-common">
        <tr>
            <td>col1</td>
            <td><input name="COL1" type="text" class="form-control" /></td>
        </tr>
        <tr>
            <td>col2</td>
            <td><input name="COL2" type="text" class="form-control" /></td>
        </tr>
        <tr>
            <td>file1</td>
            <td><input name="file1" type="file" /></td>
        </tr>
        <tr>
            <td>file1 (multiple)</td>
            <td><input name="file1" type="file" /></td>
        </tr>
        <tr>
            <td>file2</td>
            <td><input name="file2" type="file" /></td>
        </tr>
    </table>
    <button id="btn1" class="btn btn-xs btn-primary">Json타입 전송 (파일 제외)</button>
    <button id="btn2" class="btn btn-xs btn-primary">Form Append타입 전송</button>
    <button id="btn3" class="btn btn-xs btn-primary">Form Append타입 전송 (button progress)</button>

    <div id="progress-bar" class="progress">
        <div class="progress-bar bg-success" style="width:100%">100%</div>
    </div>
</div>

<script>
    const formUrlEncoded = x => Object.keys(x).reduce((p, c) => p + `&${c}=${encodeURIComponent(x[c])}`, '');
    
    //Object.keys()
    //Array.isArray()

    $("#btn1").click(function () {
        //파일을 전송할 수 없음
        var obj = {};

        $("#ajax-test input[type=text]").each(function () {
            obj[$(this).attr("name")] = $(this).val();
        });

        axios({
            method: 'post',
            url: "/ClientSide/SaveAjaxData",
            headers: { 'Content-type': 'application/x-www-form-urlencoded', },
            data: formUrlEncoded(obj)
        })
        .then(function (response) {
            //handle success
            console.log(response);
        })
        .catch(function (response) {
            //handle error
            console.log(response);
        });
    });

    $("#btn2").click(function () {
        //json 형태로 전송할 수 없음
        var obj = {};
        $("#ajax-test input[type=text]").each(function () {
            obj[$(this).attr("name")] = $(this).val();
        });

        var formData = new FormData();
        formData.append("json_data", JSON.stringify(obj));

        $("#ajax-test input[type=file]").each(function () {
            var fileObj = $(this)[0].files;

            if (fileObj.length > 0) {
                formData.append("file1", fileObj[0]);
            }
        });

        $.ajax({
            type: "POST",
            enctype: 'multipart/form-data',
            url: "/ClientSide/SaveAjaxData",
            data: formData,
            processData: false,
            contentType: false,
            cache: false,
            success: function (data, status, xhr) {
                if (data.msg == "OK") {
                    alert("저장되었습니다");
                }
                else {
                    alert(data.msg);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                AjaxCommonError(xhr);
            },
            xhr: function () {  // custom xhr
                $("#progress-bar > .progress-bar").width(0).addClass("progress-bar-striped progress-bar-animated");

                myXhr = $.ajaxSettings.xhr();
                if (myXhr.upload) { // check if upload property exists
                    myXhr.upload.addEventListener('progress', updateProgress, false); // for handling the progress of the upload
                    myXhr.upload.addEventListener("load", transferComplete);
                    myXhr.upload.addEventListener("error", transferFailed);
                    myXhr.upload.addEventListener("abort", transferCanceled);
                }
                return myXhr;
            }
        });
    });

    $("#btn3").click(function () {
        var btn = $(this)[0];

        var obj = {};
        $("#ajax-test input[type=text]").each(function () {
            obj[$(this).attr("name")] = $(this).val();
        });

        var formData = new FormData();
        formData.append("json_data", JSON.stringify(obj));

        $("#ajax-test input[type=file]").each(function () {
            var fileObj = $(this)[0].files;

            if (fileObj.length > 0) {
                formData.append("file1", fileObj[0]);
            }
        });

        axios({
            method: 'post',
            url: "/ClientSide/SaveAjaxData",
            headers: { 'Content-type': "multipart/form-data", },
            data: formData
        })
        .then(function (response) {
            //handle success
            console.log(response);
        })
        .catch(function (response) {
            //handle error
            console.log(response);
        });
    });

    function updateProgress(evt) {
        //console.log('updateProgress');
        if (evt.lengthComputable) {
            var percentComplete = Math.round((evt.loaded / evt.total) * 100);

            $("#progress-bar > .progress-bar").width(percentComplete + "%").text(percentComplete + "%");

            //console.log(percentComplete);
            if (percentComplete >= 100) {
                $("#progress-bar > .progress-bar").text("Upload 자료 확인 중");
            }
        } else {
            // Unable to compute progress information since the total size is unknown
            //console.log('unable to complete');
        }
    }
    function transferComplete(evt) {
        $("#progress-bar > .progress-bar").removeClass("progress-bar-striped progress-bar-animated").text("Upload 완료");
        //console.log("The transfer is complete.");
    }

    function transferFailed(evt) {
        $("#progress-bar > .progress-bar").removeClass("progress-bar-striped progress-bar-animated");
        console.log("An error occurred while transferring the file.");
    }

    function transferCanceled(evt) {
        $("#progress-bar > .progress-bar").removeClass("progress-bar-striped progress-bar-animated");
        console.log("The transfer has been canceled by the user.");
    }

</script>
